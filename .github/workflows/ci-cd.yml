name: Build and Deploy to NCP
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # 수동 실행 트리거 추가

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # 체크아웃 및 JDK 세팅
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'zulu'
    # Application YML 파일 생성
    - name: Make application.yml
      run: |
        mkdir -p src/main/resources
        echo "${{ secrets.APPLICATION_AUTH_YML }}" | base64 --decode > src/main/resources/application-auth.yml
        echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
        find src
      shell: bash
    # Gradle 권한 부여
    - name: Grant permission for gradlew
      run: chmod +x ./gradlew
    # 빌드
    - name: Build with Gradle
      run: ./gradlew clean build
    # 빌드한 jar 파일을 도커 이미지로 빌드하고 도커 허브에 푸시
    - name: Build and push Docker image
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/dive-in .
        docker push ${{ secrets.DOCKER_USERNAME }}/dive-in

  deploy:
    # needs를 통해 build job이 수행 성공시에 작업되도록 설정
    needs: build
    runs-on: ubuntu-latest
    steps:
    # Docker image pull & run (로컬에서 바로 실행)
    - name: Docker image pull and run locally
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker network create web-network || true
        docker stop diveincontainer || true
        docker rm -f diveincontainer || true
        docker pull ${{ secrets.DOCKER_USERNAME }}/dive-in
        docker run -d -p 8080:8080 --network web-network --name diveincontainer ${{ secrets.DOCKER_USERNAME }}/dive-in
